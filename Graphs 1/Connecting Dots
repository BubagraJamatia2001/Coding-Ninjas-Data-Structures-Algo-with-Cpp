/*
Connecting Dots

Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). 
Now Gary is getting bore and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence
of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:
1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.
Assume input to be 0-indexed based.
Input Format :
Line 1 : Two integers N and M, the number of rows and columns of the board
Next N lines : a string consisting of M characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.
Output Format :
Return 1 if there is a cycle else return 0
Constraints :
2 ≤ N, M ≤ 50
Sample Input :
3 4
AAAA
ABCA
AAAA
Sample Output :
1
*/

#include<bits/stdc++.h>
using namespace std;
#define MAXN 51

int combi[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};

bool checklimits(int i, int j, int n, int m){
    return (i>-1 && i<n && j>-1 && j<m);
}

class cell{
    public:
    int i, j;
    cell(int i, int j){
        this->i = i;
        this->j = j;
    }
};

bool helper(char board[][MAXN], int n, int m, int i, int j, vector<cell>& V, char ch){
    if(V.size()+1>=4){//+1 for current node 
        int x = V[0].i;
        int y = V[0].j;
        for(int k=0; k<4; k++)
            if(i+combi[k][0]==x && j+combi[k][1]==y)
                return true;
    }
    char temp = board[i][j];
    board[i][j] = '\0';
    cell C(i, j);
    V.push_back(C);
    for(int k=0; k<4; k++)
        if(checklimits(i+combi[k][0], j+combi[k][1], n, m) && board[i+combi[k][0]][j+combi[k][1]]==ch)
            if(helper(board, n, m, i+combi[k][0], j+combi[k][1], V, ch))
                return true;
    board[i][j] = temp;
    V.pop_back();
    return false;
    
    return true;
}

int solve(char board[][MAXN],int n, int m){
    vector<cell> V; 
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            if(helper(board, n, m, i, j, V, board[i][j]))
                return 1;
    return 0;
}

int main()
{
	int N,M,i;
	char board[MAXN][MAXN];
	cin>>N>>M;
	for(i = 0;i < N; i++){
		cin>>board[i];
	}
	cout<<solve(board,N,M)<<endl;
}
